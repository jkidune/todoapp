{"version":3,"sources":["listItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","value","text","type","id","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","filteredItems","filter","onSubmit","placeholder","ref","inputElement","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAsCeA,MA/Bf,SAAmBC,GAEf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,MAAOH,EAAKI,KAAMC,KAAK,OAAOC,GAAIN,EAAKE,IAC9CK,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOP,MAAOH,EAAKE,QAIjD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAOxG,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,eCzBbmB,IAAQC,IAAIC,K,IAmFGC,E,kDA5Eb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAM,CACTtB,MAAM,GACNuB,YAAY,CACVjB,KAAK,GACLF,IAAI,KAGP,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZF,E,wDAcNf,GACViB,KAAKC,SAAS,CACZL,YAAY,CACVjB,KAAMI,EAAEE,OAAOP,MACfD,IAAIyB,KAAKC,W,8BAIPpB,GACNA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACS,KAAjBA,EAAQ1B,KAAa,CACvB,IAAMN,EAAM,GAAD,mBAAK2B,KAAKL,MAAMtB,OAAhB,CAAuBgC,IAClCL,KAAKC,SAAS,CACZ5B,MAAOA,EACPuB,YAAa,CACXjB,KAAK,GACLF,IAAI,S,iCAMDA,GACT,IAAM+B,EAAgBR,KAAKL,MAAMtB,MAAMoC,QAAO,SAAAlC,GAAI,OAAIA,EAAKE,MAAMA,KACjEuB,KAAKC,SAAS,CACZ5B,MAAMmC,M,gCAGA7B,EAAMF,GACd,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKI,KAAKA,MAGdqB,KAAKC,SAAS,CACZ5B,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACb,gCACA,0BAAMK,GAAG,aAAa6B,SAAUV,KAAKD,SACrC,2BAAOnB,KAAK,OAAO+B,YAAY,YAAYjC,MAAOsB,KAAKL,MAAMC,YAAYjB,KAAMG,SAAUkB,KAAKH,YAAae,IAAKZ,KAAKa,eACrH,4BAAQjC,KAAK,UAAb,SAKF,kBAAC,EAAD,CAAWP,MAAO2B,KAAKL,MAAMtB,MAAOe,WAAaY,KAAKZ,WACtDJ,UAAYgB,KAAKhB,iB,GArEL8B,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.8204eebc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\n\r\nfunction ListItems(props) {\r\n\r\n    const items = props.items;\r\n    const listItems = items.map(item =>\r\n        {\r\n            return <div className=\"list\" key={item.key}>\r\n                <p>\r\n                    <input value={item.text} type=\"text\" id={item.key}\r\n                    onChange = {\r\n                        (e) =>{\r\n                            props.setUpdate(e.target.value, item.key)\r\n                        }\r\n                    }\r\n                    />\r\n                <span>\r\n                    <FontAwesomeIcon className=\"faicons\" icon='trash' onClick={ () => props.deleteItem(item.key)}/>\r\n                </span>\r\n                </p>\r\n                \r\n            </div>\r\n        })\r\n        \r\n    return(\r\n        <div>\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n            {listItems}\r\n            </FlipMove>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\r\nimport './App.css';\r\nimport  ListItems from './listItems';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nlibrary.add(faTrash);\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{  //we choose a current state based on things that will change//\r\n  \r\n  constructor(props){\r\n    super(props);               //we call our base class with super//\r\n    this.state={\r\n      items:[],\r\n      currentItem:{\r\n        text:'',\r\n        key:''\r\n      },\r\n     }\r\n     this.handleInput = this.handleInput.bind(this);  //we need to bind this to handleInput//\r\n     this.addItem = this.addItem.bind(this);\r\n     this.deleteItem = this.deleteItem.bind(this);\r\n     this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n  handleInput(e){\r\n    this.setState({          //we set state and inside we put an object that contain the variable that we want to change//\r\n      currentItem:{\r\n        text: e.target.value,\r\n        key:Date.now()\r\n      }\r\n    })\r\n  }\r\n  addItem(e) {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    console.log(newItem);\r\n    if (newItem.text !== '') {\r\n      const items=[...this.state.items, newItem]  //add the current item then followed by new item,//\r\n      this.setState({\r\n        items: items,\r\n        currentItem: {\r\n          text:'',\r\n          key:''\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  deleteItem(key) {\r\n    const filteredItems = this.state.items.filter(item => item.key!==key);\r\n    this.setState({\r\n      items:filteredItems\r\n    })\r\n  }\r\n  setUpdate(text, key) {\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.text=text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"app\">\r\n        <header>\r\n        <form id=\"form-input\" onSubmit={this.addItem}>\r\n        <input type=\"text\" placeholder=\"Type here\" value={this.state.currentItem.text} onChange={this.handleInput} ref={this.inputElement}/>\r\n        <button type=\"submit\">Add</button>\r\n        </form> \r\n        \r\n\r\n      </header> \r\n      <ListItems items={this.state.items} deleteItem ={this.deleteItem}\r\n      setUpdate ={this.setUpdate}\r\n      ></ListItems>\r\n      </div>  //we simply put functions to a attribute that we want to work on//\r\n      \r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}